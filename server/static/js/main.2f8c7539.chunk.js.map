{"version":3,"sources":["components/Socket.tsx","components/Chat.tsx","components/Header.tsx","components/Input.tsx","components/GoogleAuth.tsx","components/FacebookAuth.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Socket","io","connect","Chat","chat","className","map","singleChat","index","key","src","profilePic","alt","name","parse","message","Header","props","Input","onTextChange","onMessageSubmit","onClick","e","type","placeholder","value","onChange","target","onKeyPress","GoogleAuth","setAccountInfo","setLoginStatus","setState","clientId","buttonText","onSuccess","response","console","log","nt","Ad","email","Wt","profileObj","imageUrl","emit","cookiePolicy","FacebookAuth","appId","autoLoad","fields","callback","status","picture","data","url","onFailure","alert","cookie","App","useState","state","accountInfo","setChat","totalUsers","setTotalUsers","loginStatus","setSid","useEffect","on","messages","sid","prevChat","removeAllListeners","preventDefault","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.2f8c7539.chunk.js","sourcesContent":["import io from 'socket.io-client';\n\nconst Socket = io.connect('http://localhost:4000')\n\nexport default Socket;","import React from \"react\";\nimport '../styles/chat.css';\nimport parse from 'html-react-parser';\n\ninterface SingleChatType {\n    message: string\n    name: string\n    profilePic: string\n}\n\ninterface ChatType {\n    chat: SingleChatType[]\n}\n\nconst Chat: React.FC<ChatType> = ({chat}) => {\n    return (\n        <div className=\"h-auto\">\n            {chat.map((singleChat, index) => (\n                <div key={index} className=\"m-4\">\n                    <div className=\"flex p-2 flex-col inline-flex mb-3 max-w-md border-opacity-0 rounded-lg\n                        overflow-y-auto bg-gray-700\">\n                        <div className=\"flex space-x-2\">\n                            <img className=\"rounded-full w-8 h-8\" src={singleChat.profilePic} alt=\"profile pic\"/>\n                            <div className=\"h-auto font-extrabold text-white text-md mr-2 font-sans\">{singleChat.name}</div>\n                        </div>\n                        <div>\n                            <div\n                                className=\"font-mono mt-1 text-gray-200 text-base h-auto \">{parse(singleChat.message)}</div>\n                        </div>\n                    </div>\n                </div>\n            ))}\n        </div>\n    )\n\n}\nexport default Chat;\n\n","import React from 'react';\n\n\ninterface HeaderType {\n    props: [number, string]\n}\n\nconst Header: React.FC<HeaderType> = ({props}) => {\n\n    return(\n\n            <div className=\"flex flex-row place-items-auto items-center\">\n\n                    <div className=\"flex-1 p-3 m-3 font-serif text-white text-xl font-extrabold\">\n                        #general\n                    </div>\n                <div className=\"flex-1 items-center text-center text-c p-3 m-3 font-serif text-gray-400 text-xl \">\n                    {props[1]}\n                </div>\n                <div className=\"flex-1 text-right font-serif text-white text-xl p-3 m-3\">\n                    <span className=\"text-green-500 text-xl\">‚óè </span>\n                    Online: {props[0]}\n                </div>\n            </div>\n\n    )\n}\n\nexport default Header","import React from \"react\";\n\ninterface InputType {\n    onTextChange: (message: string) => void\n    onMessageSubmit: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\n    message: string\n}\n\nconst Input: React.FC<InputType> = ({onTextChange, onMessageSubmit, message}) => {\n\n    const onSubmit = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        onMessageSubmit(e)\n    }\n\n    const handleKeyPress = (e: any) => {\n        if (e.key === 'Enter') {\n            onMessageSubmit(e)\n        }\n    }\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        onTextChange(e.target.value)\n    }\n\n    return (\n        <div className=\"flex w-full m-2 justify-center rounded-lg border-2 border-grey-600 \">\n            <button className=\"hover:bg-gray-200 text-3xl text-grey bg-gray-300 px-3 border-r-2\" onClick={onSubmit}>+\n            </button>\n            <input type=\"text\" className=\"w-full mr-4 p-4 bg-gray-300 focus:bg-white\"\n                   placeholder=\"Message to #general\"\n                   value={message}\n                   onChange={onChange}\n                   onKeyPress={handleKeyPress}/>\n        </div>\n    )\n}\n\nexport default Input","import React from \"react\";\nimport GoogleLogin from 'react-google-login';\nimport Socket from \"./Socket\";\nimport FontAwesome from \"react-fontawesome\";\n\ninterface AccountType {\n    email: string\n    profilePic: string\n}\ninterface SingleChatType {\n    message: string\n    name: string\n}\n\ninterface GoogleAuthType {\n    setAccountInfo: (e: AccountType) => void\n    setLoginStatus: (e: boolean) => void\n    setState: (e: SingleChatType) => void\n}\n\nconst GoogleAuth:React.FC<GoogleAuthType> = ({setAccountInfo, setLoginStatus, setState}) => {\n\n    const responseGoogle = (response: any) => {\n        console.log(response.nt.Ad)\n        setLoginStatus( false)\n        setState({name: response.nt.Ad, message: ''})\n        setAccountInfo({email: response.nt.Wt, profilePic: response.profileObj.imageUrl})\n        Socket.emit('update_total_users', response.nt.Wt)\n    }\n\n\n    return(\n        <div className=\"align-middle\">\n            <GoogleLogin\n            clientId=\"955471402983-3ij9nsbi3gsds15h189e6nnnj7tpguud.apps.googleusercontent.com\"\n            buttonText=\"Login\"\n            onSuccess={responseGoogle}\n            cookiePolicy={'single_host_origin'} >\n            <FontAwesome\n                name='google' />\n            <span> Login with Google</span>\n            </GoogleLogin>\n        </div>\n    )\n}\nexport default GoogleAuth;","import React from \"react\";\nimport Socket from \"./Socket\";\nimport FacebookLogin from 'react-facebook-login';\n\ninterface AccountType {\n    email: string\n    profilePic: string\n}\ninterface SingleChatType {\n    message: string\n    name: string\n}\ninterface FacebookAuthType {\n    setAccountInfo: (e: AccountType) => void\n    setLoginStatus: (e: boolean) => void\n    setState: (e: SingleChatType) => void\n}\n\nconst FacebookAuth:React.FC<FacebookAuthType> = ({setAccountInfo, setLoginStatus, setState}) => {\n\n    const responseFacebook = (response: any) => {\n        console.log(response.status)\n        setLoginStatus( false)\n        setState({name: response.name, message: ''})\n        setAccountInfo({email: response.email, profilePic: response.picture.data.url})\n        Socket.emit('update_total_users', response.email)\n    }\n\n     const failureFacebook = () => {\n        return(\n            alert(\"Failed to login\")\n        )\n    }\n\n    return(\n        <div className=\"align-middle\">\n            <FacebookLogin\n            appId=\"856995921505171\"\n            autoLoad={false}\n            fields=\"name,email,picture\"\n            callback={responseFacebook}\n            onFailure={failureFacebook}\n            cookie={false}\n          />\n        </div>\n    )\n}\nexport default FacebookAuth;","import React, {useEffect, useState} from 'react';\nimport Socket from './Socket';\nimport Chat from './Chat';\nimport Header from \"./Header\";\nimport Input from \"./Input\";\nimport GoogleAuth from \"./GoogleAuth\";\nimport FacebookAuth from \"./FacebookAuth\";\n\ninterface stateType {\n    message: string\n    name: string\n}\ninterface SingleChatType {\n    message: string\n    name: string\n    profilePic: string\n}\ninterface AccountType {\n    email: string\n    profilePic: string\n}\n\nfunction App() {\n    const [state, setState] = useState<stateType>({name: '', message: ''})\n    const [accountInfo, setAccountInfo] = useState<AccountType>({email: '', profilePic: ''})\n    const [chat, setChat] = useState<SingleChatType[]>([])\n    const [totalUsers, setTotalUsers] = useState<number>(0)\n    const [loginStatus, setLoginStatus] = useState<boolean>( true)\n    const [sid, setSid] = useState<string>('')\n\n    useEffect(() => {\n\n        Socket.on('on_connect', (e: any) => {\n            setChat(e.messages)\n            setSid(e.sid)\n        })\n\n        Socket.on('update_users', (e: any) => {\n            setTotalUsers(e.totalUsers)\n        })\n\n        Socket.on('message_sent', (e: any) => {\n            const {name, message, email, profilePic} = e.message\n            return setChat(prevChat => [...prevChat, {name, message, profilePic}]);\n        })\n\n        Socket.on('on_disconnect', (e: any) => {\n            setTotalUsers(e.totalUsers)\n        })\n\n        return () => {\n              Socket && Socket.removeAllListeners()\n          }\n\n    },[])\n\n    const onTextChange = (message: string) => {\n        setState({name: state.name, message: message})\n    }\n\n    const onMessageSubmit = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault()\n        const {name, message} = state\n        const {email, profilePic} = accountInfo\n        Socket.emit('message', {name, message, email, profilePic})\n        setState({name, message: ''})\n    }\n\n    const ifAuthenticated = () => {\n        if(loginStatus) {\n            return (\n                <React.Fragment>\n                    <div className=\"bg-gray-200 w-screen h-screen flex justify-center items-center\">\n                        <div className=\"w-1/3 justify-center\">\n                            <h1 className=\"font-hairline mb-6 font-extrabold text-4xl text-left\">Login to ChatApp</h1>\n                            <GoogleAuth setAccountInfo={setAccountInfo} setLoginStatus={setLoginStatus} setState={setState}/>\n                            <FacebookAuth setAccountInfo={setAccountInfo} setLoginStatus={setLoginStatus} setState={setState}/>\n                        </div>\n                    </div>\n                </React.Fragment>\n            )\n        }else {\n            return (\n                <div className=\"flex flex-col h-screen overflow-x-hidden \">\n                    <div className=\"mb-3 bg-gradient-to-b from-gray-900\">\n                        <Header props={[totalUsers, state.name]}/>\n                    </div>\n                    <div className=\"flex flex-1 flex-col-reverse overflow-y-auto\">\n                        <Chat chat={chat} />\n                    </div>\n                    <Input onTextChange={onTextChange} onMessageSubmit={onMessageSubmit} message={state.message}/>\n                </div>\n            )\n        }\n    }\n    return(\n        <div>\n            {ifAuthenticated()}\n        </div>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}