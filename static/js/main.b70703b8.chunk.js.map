{"version":3,"sources":["components/Socket.tsx","components/Chat.tsx","components/Header.tsx","components/Input.tsx","components/FacebookAuth.tsx","components/GoogleAuth.tsx","components/Login.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Socket","io","connect","Chat","chat","state","className","map","singleChat","src","profilePic","alt","name","parse","message","Header","props","Input","onTextChange","onMessageSubmit","type","onClick","e","placeholder","value","onChange","target","onKeyPress","key","required","FacebookAuth","setAccountInfo","setLoginStatus","setState","appId","autoLoad","fields","callback","response","email","picture","data","url","emit","onFailure","alert","cookie","GoogleAuth","clientId","buttonText","onSuccess","profileObj","imageUrl","cookiePolicy","Login","App","useState","accountInfo","setChat","totalUsers","setTotalUsers","loginStatus","useEffect","on","messages","prevChat","removeAllListeners","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.b70703b8.chunk.js","sourcesContent":["import io from 'socket.io-client';\n\nconst Socket = io.connect('/');\n\nexport default Socket;\n","import React from 'react';\nimport '../styles/chat.css';\nimport parse from 'html-react-parser';\n\ninterface SingleChatType {\n    message: string\n    name: string\n    email: string\n    profilePic: string\n}\ninterface stateType {\n    message: string\n    name: string\n}\ninterface ChatType {\n    chat: SingleChatType[]\n    state: stateType\n}\n\nconst Chat: React.FC<ChatType> = ({ chat, state }: ChatType) => (\n  <div className=\"h-auto\">\n    {chat.map((singleChat) => (\n      <div className=\"m-4\">\n        <div className=\"flex p-2 flex-col inline-flex mb-3 max-w-md border-opacity-0 rounded-lg\n                        overflow-y-auto bg-gray-700\"\n        >\n          <div className=\"flex space-x-2\">\n            <img className=\"rounded-full w-8 h-8\" src={singleChat.profilePic} alt=\"profile pic\" />\n            <div className=\"h-auto font-extrabold text-white text-md mr-2 font-sans\">{singleChat.name}</div>\n          </div>\n          <div>\n            <div\n              className=\"font-mono mt-1 text-gray-200 text-base h-auto \"\n            >\n              {parse(singleChat.message)}\n            </div>\n          </div>\n        </div>\n      </div>\n    ))}\n  </div>\n);\n\nexport default Chat;\n","import React from 'react';\n\ninterface HeaderType {\n    props: [number, string]\n}\n\nconst Header: React.FC<HeaderType> = ({ props }: HeaderType) => (\n/* eslint-disable react/prop-types */\n/* eslint-disable react/destructuring-assignment */\n  <div className=\"flex flex-row place-items-auto items-center\">\n    <div className=\"flex-1 p-3 m-3 font-serif text-white text-xl font-extrabold\">\n      #general\n    </div>\n    <div className=\"flex-1 items-center text-center text-c p-3 m-3 font-serif text-gray-400 text-xl \">\n      {props[1]}\n    </div>\n    <div className=\"flex-1 text-right font-serif text-white text-xl p-3 m-3\">\n      <span className=\"text-green-500 text-xl\">‚óè </span>\n      Online:\n      {' '}\n      {props[0]}\n    </div>\n  </div>\n\n);\n\nexport default Header;\n","import React from 'react';\n\ninterface InputType {\n    onTextChange: (message: string) => void\n    onMessageSubmit: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\n    message: string\n}\n\nconst Input: React.FC<InputType> = ({ onTextChange, onMessageSubmit, message }: InputType) => {\n  const onSubmit = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    if (message !== '') {\n      onMessageSubmit(e);\n    }\n  };\n\n  const handleKeyPress = (e: any) => {\n    if (e.key === 'Enter' && message !== '') {\n      onMessageSubmit(e);\n    }\n  };\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onTextChange(e.target.value);\n  };\n\n  return (\n    <div className=\"flex w-full m-2 justify-center rounded-lg border-2 border-grey-600 \">\n      <button type=\"button\" className=\"hover:bg-gray-200 text-3xl text-grey bg-gray-300 px-3 border-r-2\" onClick={onSubmit}>\n        +\n      </button>\n      <input\n        type=\"text\"\n        className=\"w-full mr-4 p-4 bg-gray-300 focus:bg-white\"\n        placeholder=\"Message to #general\"\n        value={message}\n        onChange={onChange}\n        onKeyPress={handleKeyPress}\n        required\n      />\n    </div>\n  );\n};\n\nexport default Input;\n","import React from 'react';\nimport FacebookLogin from 'react-facebook-login';\nimport Socket from './Socket';\n\ninterface AccountType {\n    email: string\n    profilePic: string\n}\ninterface SingleChatType {\n    message: string\n    name: string\n}\ninterface FacebookAuthType {\n    setAccountInfo: (e: AccountType) => void\n    setLoginStatus: (e: boolean) => void\n    setState: (e: SingleChatType) => void\n}\n\nconst FacebookAuth:React.FC<FacebookAuthType> = (\n  { setAccountInfo, setLoginStatus, setState }: FacebookAuthType,\n) => {\n  const responseFacebook = (response: any) => {\n    setLoginStatus(false);\n    setState({ name: response.name, message: '' });\n    setAccountInfo({ email: response.email, profilePic: response.picture.data.url });\n    Socket.emit('update_total_users', response.email);\n  };\n\n  const failureFacebook = () => (\n    // eslint-disable-next-line no-alert\n    alert('Failed to login')\n  );\n\n  return (\n    <div className=\"align-middle\">\n      <FacebookLogin\n        appId=\"856995921505171\"\n        autoLoad={false}\n        fields=\"name,email,picture\"\n        callback={responseFacebook}\n        onFailure={failureFacebook}\n        cookie={false}\n      />\n    </div>\n  );\n};\nexport default FacebookAuth;\n","import React from 'react';\nimport GoogleLogin from 'react-google-login';\nimport FontAwesome from 'react-fontawesome';\nimport Socket from './Socket';\n\ninterface AccountType {\n    email: string\n    profilePic: string\n}\ninterface SingleChatType {\n    message: string\n    name: string\n}\n\ninterface GoogleAuthType {\n    setAccountInfo: (e: AccountType) => void\n    setLoginStatus: (e: boolean) => void\n    setState: (e: SingleChatType) => void\n}\n\nconst GoogleAuth:React.FC<GoogleAuthType> = (\n  { setAccountInfo, setLoginStatus, setState }: GoogleAuthType,\n) => {\n  const responseGoogle = (response: any) => {\n    setLoginStatus(false);\n    setState({ name: response.profileObj.name, message: '' });\n    setAccountInfo({ email: response.profileObj.email, profilePic: response.profileObj.imageUrl });\n    Socket.emit('update_total_users', response.profileObj.email);\n  };\n\n  return (\n    <div className=\"align-middle\">\n      <GoogleLogin\n        clientId=\"955471402983-pei3u5jmjvjq6uiruv8dv4mdlch9ebig.apps.googleusercontent.com\"\n        buttonText=\"Login\"\n        onSuccess={responseGoogle}\n        cookiePolicy=\"single_host_origin\"\n      >\n        <FontAwesome name=\"google\" />\n        <span> Login with Google</span>\n      </GoogleLogin>\n    </div>\n  );\n};\nexport default GoogleAuth;\n","import React from 'react';\nimport FacebookAuth from './FacebookAuth';\nimport GoogleAuth from './GoogleAuth';\n\ninterface AccountType {\n    email: string\n    profilePic: string\n}\ninterface SingleChatType {\n    message: string\n    name: string\n}\ninterface LoginType {\n    setAccountInfo: (e: AccountType) => void\n    setLoginStatus: (e: boolean) => void\n    setState: (e: SingleChatType) => void\n}\n\nconst Login:React.FC<LoginType> = ({ setAccountInfo, setLoginStatus, setState }: LoginType) => (\n  <>\n    <div className=\"bg-gray-200 w-screen h-screen flex flex-col justify-center items-center\">\n      <h1 className=\"font-hairline mb-6 font-extrabold text-4xl text-left\">Login to ChatApp</h1>\n      <div className=\"flex-col flex \">\n        <GoogleAuth\n          setAccountInfo={setAccountInfo}\n          setLoginStatus={setLoginStatus}\n          setState={setState}\n        />\n        <FacebookAuth\n          setAccountInfo={setAccountInfo}\n          setLoginStatus={setLoginStatus}\n          setState={setState}\n        />\n      </div>\n    </div>\n  </>\n);\n\nexport default Login;\n","import React, { useEffect, useState } from 'react';\nimport Socket from './Socket';\nimport Chat from './Chat';\nimport Header from './Header';\nimport Input from './Input';\nimport Login from './Login';\n\ninterface stateType {\n    message: string\n    name: string\n}\ninterface SingleChatType {\n    message: string\n    name: string\n    email: string\n    profilePic: string\n}\ninterface AccountType {\n    email: string\n    profilePic: string\n}\n\nfunction App() {\n  const [state, setState] = useState<stateType>({ name: '', message: '' });\n  const [accountInfo, setAccountInfo] = useState<AccountType>({ email: '', profilePic: '' });\n  const [chat, setChat] = useState<SingleChatType[]>([]);\n  const [totalUsers, setTotalUsers] = useState<number>(0);\n  const [loginStatus, setLoginStatus] = useState<boolean>(true);\n\n  useEffect(() => {\n    Socket.on('on_connect', (e: any) => {\n      setChat(e.messages);\n    });\n\n    Socket.on('update_users', (e: any) => {\n      setTotalUsers(e.totalUsers);\n    });\n\n    Socket.on('message_sent', (e: any) => {\n      const {\n        name, message, email, profilePic,\n      } = e.message;\n      return setChat((prevChat) => [...prevChat, {\n        name, message, email, profilePic,\n      }]);\n    });\n\n    Socket.on('on_disconnect', (e: any) => {\n      setTotalUsers(e.totalUsers);\n    });\n    /* eslint-disable no-unused-expressions */\n    return () => {\n      Socket && Socket.removeAllListeners();\n    };\n  }, []);\n\n  const onTextChange = (message: string) => {\n    setState({ name: state.name, message });\n  };\n\n  const onMessageSubmit = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault();\n    const { name, message } = state;\n    const { email, profilePic } = accountInfo;\n    Socket.emit('message', {\n      name, message, email, profilePic,\n    });\n    setState({ name, message: '' });\n  };\n\n  const ifAuthenticated = () => {\n    if (loginStatus) {\n      return (\n        <Login\n          setAccountInfo={setAccountInfo}\n          setLoginStatus={setLoginStatus}\n          setState={setState}\n        />\n      );\n    }\n    return (\n      <div className=\"flex flex-col h-screen overflow-x-hidden \">\n        <div className=\"mb-3 bg-gradient-to-b from-gray-900\">\n          <Header props={[totalUsers, state.name]} />\n        </div>\n        <div className=\"flex flex-1 flex-col-reverse overflow-y-auto\">\n          <Chat chat={chat} state={state} />\n        </div>\n        <Input\n          onTextChange={onTextChange}\n          onMessageSubmit={onMessageSubmit}\n          message={state.message}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      {ifAuthenticated()}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}